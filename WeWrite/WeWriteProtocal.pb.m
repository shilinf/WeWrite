// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "WeWriteProtocal.pb.h"

@implementation WeWriteProtocalRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WeWriteProtocalRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Event ()
@property int32_t sequenceId;
@property Event_EventType eventType;
@property int32_t location;
@property (retain) NSString* content;
@end

@implementation Event

- (BOOL) hasSequenceId {
  return !!hasSequenceId_;
}
- (void) setHasSequenceId:(BOOL) value {
  hasSequenceId_ = !!value;
}
@synthesize sequenceId;
- (BOOL) hasEventType {
  return !!hasEventType_;
}
- (void) setHasEventType:(BOOL) value {
  hasEventType_ = !!value;
}
@synthesize eventType;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value {
  hasLocation_ = !!value;
}
@synthesize location;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (void) dealloc {
  self.content = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sequenceId = 0;
    self.eventType = Event_EventTypeUnknown;
    self.location = 0;
    self.content = @"";
  }
  return self;
}
static Event* defaultEventInstance = nil;
+ (void) initialize {
  if (self == [Event class]) {
    defaultEventInstance = [[Event alloc] init];
  }
}
+ (Event*) defaultInstance {
  return defaultEventInstance;
}
- (Event*) defaultInstance {
  return defaultEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSequenceId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequenceId) {
    [output writeInt32:1 value:self.sequenceId];
  }
  if (self.hasEventType) {
    [output writeEnum:2 value:self.eventType];
  }
  if (self.hasLocation) {
    [output writeInt32:3 value:self.location];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSequenceId) {
    size += computeInt32Size(1, self.sequenceId);
  }
  if (self.hasEventType) {
    size += computeEnumSize(2, self.eventType);
  }
  if (self.hasLocation) {
    size += computeInt32Size(3, self.location);
  }
  if (self.hasContent) {
    size += computeStringSize(4, self.content);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Event*) parseFromData:(NSData*) data {
  return (Event*)[[[Event builder] mergeFromData:data] build];
}
+ (Event*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input {
  return (Event*)[[[Event builder] mergeFromInputStream:input] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Event_Builder*) builder {
  return [[[Event_Builder alloc] init] autorelease];
}
+ (Event_Builder*) builderWithPrototype:(Event*) prototype {
  return [[Event builder] mergeFrom:prototype];
}
- (Event_Builder*) builder {
  return [Event builder];
}
@end

BOOL Event_EventTypeIsValidValue(Event_EventType value) {
  switch (value) {
    case Event_EventTypeUnknown:
    case Event_EventTypeInsert:
    case Event_EventTypeDelete:
    case Event_EventTypeUndo:
    case Event_EventTypeRedo:
    case Event_EventTypeAcknowlegement:
      return YES;
    default:
      return NO;
  }
}
@interface Event_Builder()
@property (retain) Event* result;
@end

@implementation Event_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Event alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Event_Builder*) clear {
  self.result = [[[Event alloc] init] autorelease];
  return self;
}
- (Event_Builder*) clone {
  return [Event builderWithPrototype:result];
}
- (Event*) defaultInstance {
  return [Event defaultInstance];
}
- (Event*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Event*) buildPartial {
  Event* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Event_Builder*) mergeFrom:(Event*) other {
  if (other == [Event defaultInstance]) {
    return self;
  }
  if (other.hasSequenceId) {
    [self setSequenceId:other.sequenceId];
  }
  if (other.hasEventType) {
    [self setEventType:other.eventType];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Event_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Event_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequenceId:[input readInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (Event_EventTypeIsValidValue(value)) {
          [self setEventType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setLocation:[input readInt32]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSequenceId {
  return result.hasSequenceId;
}
- (int32_t) sequenceId {
  return result.sequenceId;
}
- (Event_Builder*) setSequenceId:(int32_t) value {
  result.hasSequenceId = YES;
  result.sequenceId = value;
  return self;
}
- (Event_Builder*) clearSequenceId {
  result.hasSequenceId = NO;
  result.sequenceId = 0;
  return self;
}
- (BOOL) hasEventType {
  return result.hasEventType;
}
- (Event_EventType) eventType {
  return result.eventType;
}
- (Event_Builder*) setEventType:(Event_EventType) value {
  result.hasEventType = YES;
  result.eventType = value;
  return self;
}
- (Event_Builder*) clearEventType {
  result.hasEventType = NO;
  result.eventType = Event_EventTypeUnknown;
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (int32_t) location {
  return result.location;
}
- (Event_Builder*) setLocation:(int32_t) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (Event_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = 0;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (Event_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (Event_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
@end

